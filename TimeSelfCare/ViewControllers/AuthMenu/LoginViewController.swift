//  .swift
//  
//
//  Generated by Operahouse using Auth - Login View Controller
//  Template last updated 2017-11-01
//  Copyright Â© 2017 Apptivity Lab. All rights reserved.
//

import UIKit
import MBProgressHUD
import EasyTipView

internal class LoginViewController: BaseAuthViewController {
    override var allRequiredTextFields: [VDTTextField] {
        return [usernameTextField, passwordTextField]
    }

    private weak var tooltip: EasyTipView?
    private var triggerModeChangeCount: Int = 0

    @IBOutlet private weak var versionButton: UIButton!
    @IBOutlet private weak var containerView: UIStackView!
    @IBOutlet private weak var passwordIconButton: UIButton!
    @IBOutlet private weak var usernameIconButton: UIButton!
    @IBOutlet private weak var usernameTextField: VDTTextField!
    @IBOutlet private weak var passwordTextField: VDTTextField!
    @IBOutlet private weak var loginButton: UIButton!
    @IBOutlet private weak var scrollView: UIScrollView!

    override func viewDidLoad() {
        super.viewDidLoad()
        Keyboard.addKeyboardChangeObserver(self)

        self.updateVersionDisplay()
    }

    @IBAction func login(_ sender: Any) {
        self.resignFirstResponder()
        guard self.hasAllTextFieldFilled else {
            self.showAlertMessage(title: NSLocalizedString("Required Fields", comment: "Required Fields"), message: NSLocalizedString("Please enter your email and password to sign in.", comment: "Please enter your email and password to sign in."))
            return
        }

        let HUD: MBProgressHUD = MBProgressHUD.showAdded(to: self.view, animated: true)
        HUD.label.text = NSLocalizedString("Logging in...", comment: "Logging in...")

        let identity = UserPassIdentity(username: self.usernameTextField.inputText, password: self.passwordTextField.inputText)
        APIClient.shared.loginWithEmail(identity.identifier, password: identity.challenge) { (_ error: Error?) in
            HUD.hide(animated: true)

            guard error == nil else {
                self.showAlertMessage(with: error)
                return
            }

            self.dismissVC()
        }
    }

    @IBAction func toggleVisibility(_ sender: UIButton) {
        sender.isSelected = !sender.isSelected
        self.passwordTextField.isSecureTextEntry = !sender.isSelected
    }

    override func updateUI() {
        loginButton.isEnabled = self.hasAllTextFieldFilled
        loginButton.backgroundColor = loginButton.isEnabled ? UIColor.primary : UIColor.grey2
    }

    @IBAction func showSupport(_ sender: UIButton) {
        openURL(withURLString: "http://www.time.com.my/contact-us")
    }

    @IBAction func showFAQ(_ sender: UIButton) {
        openURL(withURLString: "http://www.time.com.my/support/faq?section=self-care")
    }

    @IBAction func toggleTooltip(_ sender: UIButton) {
        if sender == self.tooltip?.presentingView {
            self.tooltip?.dismiss(gesture: nil)
            self.tooltip = nil
            return
        }

        let message: String = sender == usernameIconButton ? NSLocalizedString("Your username is your MyKad No./ Passport No./ Passport No./ Business Registration No. [BRN]", comment: "") : NSLocalizedString("If you can't remember, click on 'Forgot Password' to reset. Special characters are not allowed.", comment: "")
        let attributes: [NSAttributedString.Key: Any] = [NSAttributedString.Key.font: UIFont.getCustomFont(family: "DIN", style: .caption1) ?? UIFont.preferredFont(forTextStyle: .caption1),
                                                        NSAttributedString.Key.foregroundColor: UIColor.white]
        let attributedString = NSAttributedString(string: message, attributes: attributes)

        var preferences = EasyTipView.Preferences()
        preferences.drawing.font = UIFont.getCustomFont(family: "DIN", style: .caption1) ?? UIFont.preferredFont(forTextStyle: .caption1)
        preferences.drawing.foregroundColor = UIColor.white
        preferences.drawing.backgroundColor = UIColor.black
        preferences.positioning.maxWidth = containerView.bounds.width
        preferences.drawing.arrowPosition = EasyTipView.ArrowPosition.top
        let tooltip = EasyTipView(text: attributedString, preferences: preferences, delegate: nil)
        self.tooltip?.dismiss(gesture: nil)
        self.tooltip = tooltip
        self.tooltip?.show(animated: true, forView: sender, withinSuperview: self.containerView)
    }

    @IBAction func triggerModeChange(_ sender: Any) {
        self.triggerModeChangeCount += 1

        if self.triggerModeChangeCount >= 5 {
            self.triggerModeChangeCount = 0

            let isStagingMode: Bool = UserDefaults.standard.bool(forKey: Installation.kIsStagingMode)
            UserDefaults.standard.set(!isStagingMode, forKey: Installation.kIsStagingMode)

            self.updateVersionDisplay()
        }
    }

    private func updateVersionDisplay() {
         let isStagingMode: Bool = UserDefaults.standard.bool(forKey: Installation.kIsStagingMode)
        var appVersion = Installation.appVersion
        if isStagingMode {
            appVersion = "\(appVersion) (Staging)"
        }
        self.versionButton.setTitle(appVersion, for: .normal)
    }

    func textFieldDidEndEditing(_ textField: UITextField) {
        self.tooltip?.dismiss(gesture: nil) {
            self.tooltip = nil
        }
    }

    override func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {

        if string == "" {
            textField.deleteBackward()
        } else {
            textField.insertText(textField == usernameTextField ? string : string.alphaNumeric())
        }
        self.updateUI()
        return false
    }
}

extension LoginViewController: KeyboardChangeObserver {
    func keyboardChanging(endHeight: CGFloat, duration: TimeInterval) {
        self.scrollView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: endHeight, right: 0)
    }
}
