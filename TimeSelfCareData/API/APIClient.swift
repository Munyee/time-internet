//
//  TimeSelfCareAPIClient.swift
//  Time Self Care
//
//  Generated by Operahouse using Data - API Client Class
//  Template last updated 2017-10-17
//  Copyright Â© 2017 Apptivity Lab. All rights reserved.
//

import Foundation
import Alamofire
import ApptivityFramework

public let TimeSelfCareDomainErrorCodeKey: String = "TimeSelfCareAPIErrorCode" // swiftlint:disable:this identifier_name

public typealias ListListener<Element> = ((_ items: [Element], _ error: Error?) -> Void)
public typealias ElementListener<Element> = ((_ item: Element?, _ error: Error?) -> Void)
public typealias SimpleRequestListener = ((_ response: [String: Any]?, _ error: Error?) -> Void)
public typealias CreateRequestListener<Element> = ((_ element: Element, _ error: Error?) -> Void)

public struct Pagination {
    var next: Int = 0
    var count: Int = 0

    init(with json: [String: Any]) {
        next = json["next"] as? Int ?? 0
        count = json["count"] as? Int ?? 0
    }

    init(next: Int, count: Int) {
        self.next = next
        self.count = count
    }

    init() {
    }
}

public extension NSNotification.Name {
    static let SessionInvalid: NSNotification.Name = NSNotification.Name(rawValue: "SessionInvalid")
}

public class APIClient {
    // swiftlint:disable force_unwrapping
    public static var  BaseAPIURL: URL {
        if Installation.isStagingMode {
            return  URL(string: "https://selfcare-apps-staging-api.time.com.my/selfcareapi/relay.php")!
        }
        return  URL(string: "https://selfcareapp.time.com.my/selfcareapi/relay.php")!
    }

    private static let _sharedInstance: APIClient = APIClient()

    public static var shared: APIClient {
        return _sharedInstance
    }

    var manager: Alamofire.SessionManager! // swiftlint:disable:this implicitly_unwrapped_optional

    private init() {
        let config = URLSessionConfiguration.default
        let serverTrust: [String: ServerTrustPolicy] = [
            "211.24.220.161": .disableEvaluation
        ]

        self.manager = Alamofire.SessionManager(configuration: config, delegate: SessionDelegate(), serverTrustPolicyManager: ServerTrustPolicyManager(policies: serverTrust))
    }

    public func getToken(forPath path: String) -> String {
        if Installation.isStagingMode {
              return "dev"
        }

        let secret: String = "selfcaretimeappapi2018"
        let rawString = path + secret
        return rawString.toMD5Hex()
    }

    func request(
        method: HTTPMethod,
        parameters: [String: Any]? = nil,
        additionalHeaders: [String: String]? = nil,
        encoding: ParameterEncoding = JSONEncoding.default) -> DataRequest {
        var headers: [String: String] = [:]
        if let additionalHeaders: [String: String] = additionalHeaders {
            for (key, value) in additionalHeaders {
                headers[key] = value
            }
        }

        let requestURL: String = "\(APIClient.BaseAPIURL.absoluteString)"

        return self.manager.request(
            requestURL,
            method: method,
            parameters: parameters,
            encoding: encoding,
            headers: headers)
    }

    func postRequest(
        path: String,
        body: [String: Any],
        completion: ((_ json :[String: Any], _ error: Error?) -> Void)?) {

        var parameters: [String: Any] = body
        parameters["action"] = path
        parameters["token"] = self.getToken(forPath: path)

        parameters["session_id"] = AccountController.shared.sessionId
        print(parameters)
        self.request(
            method: .post,
            parameters: parameters,
            encoding: JSONEncoding.default)
            .responseJSON { (response: DataResponse<Any>) in
                do {
                    let json = try APIClient.shared.JSONFromResponse(response: response)
                    completion?(json, nil)
                } catch {
                    if (error as? NSError)?.code == 403 {
                        NotificationCenter.default.post(name: NSNotification.Name.SessionInvalid, object: nil)
                        return
                    }
                    completion?([:], error)
                }
            }
    }

    func uploadMultipart(
        path: String,
        body: [String: Any],
        images: [UIImage],
        completion: @escaping SimpleRequestListener
        ) {
        var parameters: [String: Any] = body
        parameters["action"] = path
        parameters["token"] = self.getToken(forPath: path)

        parameters["session_id"] = AccountController.shared.sessionId

        self.manager.upload(multipartFormData: { (multipartFormData) in
            for (key, value) in parameters {
                if let valueString = value as? String,
                    let data = valueString.data(using: .utf8) {
                    multipartFormData.append(data, withName: key)
                }
            }
            for i  in 0..<images.count {
                if let data = images[i].jpegData(compressionQuality: 1.0) {
                    multipartFormData.append(data, withName: "attachment[\(i)]", fileName: "attachment_\(i)", mimeType: "image/jpeg")
                }
            }
        }, usingThreshold: UInt64(), to: APIClient.BaseAPIURL, method: .post, encodingCompletion: { encodingResult in
            switch encodingResult {
            case .success(let request, _, _):
                request.responseJSON(completionHandler: { response in
                    do {
                        let response = try APIClient.shared.JSONFromResponse(response: response)
                        completion(response, nil)
                    } catch {
                        if (error as? NSError)?.code == 403 {
                            NotificationCenter.default.post(name: NSNotification.Name.SessionInvalid, object: nil)
                            return
                        }
                        completion(nil, error)
                    }
                })
            case .failure(let error):
                completion(nil, error)
            }
        })
    }

    func getRequest(
        path: String,
        filter: String = "(deleted_at is null)",
        related: String = "",
        order: String = "created_at DESC",
        offset: Int = 0,
        limit: Int = 50) -> DataRequest {

        let parameters: [String: String] = [
            "filter": filter,
            "related": related,
            "order": order,
            "offset": "\(offset)",
            "limit": "\(limit)",
            "include_count": "true"
        ]

        return self.request(
            method: .get,
            parameters: parameters,
            encoding: URLEncoding.queryString)
    }

    func JSONFromResponse(response: DataResponse<Any>) throws -> [String: Any] {
        if let error: Error = response.result.error {
            throw error
        } else if let responseValue: Any = response.result.value {
            if let statusCode = response.response?.statusCode {
                if statusCode == 401 {
                    AuthUser.current?.logout()
                }
            }

            if let json: [String: Any] = responseValue as? [String: Any] {
                if let statusValue: String = json["status"] as? String, (statusValue != "ok" && statusValue != "password_expired") {
                    throw NSError(domain: "Time Self Care", code: 500, userInfo: [
                        NSLocalizedDescriptionKey: json["message"] ?? NSLocalizedString("An unexpected server error has occured. Please try again later.", comment: ""),
                        TimeSelfCareDomainErrorCodeKey: 500
                        ])
                } else if let errorJSON = json["error"] as? [String: Any],
                    let errorCode = errorJSON["code"] as? String,
                    let errorMessage = errorJSON["message"] as? String {
                    throw NSError(domain: "Time Self Care", code: response.response?.statusCode ?? 500, userInfo: [
                        NSLocalizedDescriptionKey: errorMessage,
                        TimeSelfCareDomainErrorCodeKey: errorCode
                        ])
                } else if let errorMessage = json["error"] as? String {
                    throw NSError(domain: "Time Self Care", code: response.response?.statusCode ?? 500, userInfo: [
                        NSLocalizedDescriptionKey: errorMessage
                        ])
                } else if let statusMessage = json["status"] as? String, statusMessage == "error" {
                    let errorMessage = json["message"] as? String ?? "Unknown error occured."
                    if ["Session expired.", "Invalid session id.", "Please login first." ].contains(errorMessage) {
                        // handle session expired
                        throw NSError(domain: "Time Self Care", code: 403, userInfo: [
                            NSLocalizedDescriptionKey: errorMessage
                            ])
                    }

                    throw NSError(domain: "Time Self Care", code: response.response?.statusCode ?? 500, userInfo: [
                        NSLocalizedDescriptionKey: errorMessage
                        ])
                }

                return json
            }
        }

        return [:]
    }

    func createFileRequestUrl(for uuidString: String) -> URL {
        return APIClient.BaseAPIURL.appendingPathComponent("files/\(uuidString)")
    }

}
