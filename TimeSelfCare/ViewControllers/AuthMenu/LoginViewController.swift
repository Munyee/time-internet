//  .swift
//  
//
//  Generated by Operahouse using Auth - Login View Controller
//  Template last updated 2017-11-01
//  Copyright Â© 2017 Apptivity Lab. All rights reserved.
//

import UIKit
import MBProgressHUD
import EasyTipView

internal class LoginViewController: BaseAuthViewController {
    override var allRequiredTextFields: [VDTTextField] {
        return [usernameTextField, passwordTextField]
    }

    private weak var tooltip: EasyTipView?
    private var triggerModeChangeCount: Int = 0

    @IBOutlet private weak var versionButton: UIButton!
    @IBOutlet private weak var containerView: UIStackView!
    @IBOutlet private weak var passwordIconButton: UIButton!
    @IBOutlet private weak var usernameIconButton: UIButton!
    @IBOutlet private weak var usernameTextField: VDTTextField!
    @IBOutlet private weak var passwordTextField: VDTTextField!
    @IBOutlet private weak var loginButton: UIButton!
    @IBOutlet private weak var scrollView: UIScrollView!
    @IBOutlet private weak var liveChatView: ExpandableLiveChatView!
    @IBOutlet private weak var liveChatConstraint: NSLayoutConstraint!

    override func viewDidLoad() {
        super.viewDidLoad()
        Keyboard.addKeyboardChangeObserver(self)

        self.updateVersionDisplay()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.isNavigationBarHidden = true
        self.liveChatView.alpha = 1
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.liveChatView.alpha = 0
    }

    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        if (liveChatView.isExpand) {
            liveChatConstraint.constant = 0
        } else {
            liveChatConstraint.constant = -125
        }
    }

    @IBAction func login(_ sender: Any) {
        self.resignFirstResponder()
        guard self.hasAllTextFieldFilled else {
            self.showAlertMessage(title: NSLocalizedString("Required Fields", comment: "Required Fields"), message: NSLocalizedString("Please enter your email and password to sign in.", comment: "Please enter your email and password to sign in."))
            return
        }

        let HUD: MBProgressHUD = MBProgressHUD.showAdded(to: self.view, animated: true)
        HUD.label.text = NSLocalizedString("Logging in...", comment: "Logging in...")

        let identity = UserPassIdentity(username: self.usernameTextField.inputText, password: self.passwordTextField.inputText)
        APIClient.shared.loginWithEmail(identity.identifier, password: identity.challenge) { _, error in
            guard error == nil else {
                HUD.hide(animated: true)
                self.showAlertMessage(with: error)
                return
            }

            guard let profile = AccountController.shared.profile else {
                HUD.hide(animated: true)
                self.showAlertMessage(title: NSLocalizedString("Error", comment: ""), message: NSLocalizedString("An unexpected login error has occured.", comment: ""), actions: [UIAlertAction(title: "OK", style: .default, handler: nil)])
                return
            }

            if profile.passwordHasExpired {
                AuthUser.current?.logout { _ in
                    HUD.hide(animated: true)

                    let alertTitle = NSLocalizedString("Password Expired", comment: "")
                    let alertMessage = NSLocalizedString("Password expired. Please reset your password.", comment: "")
                    let resetPasswordAction = UIAlertAction(title: NSLocalizedString("Reset Password", comment: ""), style: .default) { _ in
                        if let forgotPasswordVC: ForgetPasswordViewController = self.storyboard?.instantiateViewController() {
                            self.navigationController?.pushViewController(forgotPasswordVC, animated: true)
                        }
                    }
                    let cancelAction = UIAlertAction(title: NSLocalizedString("Cancel", comment: ""), style: .cancel) { _ in }
                    self.showAlertMessage(title: alertTitle, message: alertMessage, actions: [resetPasswordAction, cancelAction])
                }
            } else {
                AccountSummaryViewController.didAnimate = false
                HUD.hide(animated: true)
                self.dismissVC()
            }
        }
    }

    @IBAction func toggleVisibility(_ sender: UIButton) {
        sender.isSelected = !sender.isSelected
        self.passwordTextField.isSecureTextEntry = !sender.isSelected
    }

    override func updateUI() {
        loginButton.isEnabled = self.hasAllTextFieldFilled
        loginButton.backgroundColor = loginButton.isEnabled ? UIColor.primary : UIColor.grey2
    }

    @IBAction func showSupport(_ sender: UIButton) {
        openURL(withURLString: "http://www.time.com.my/contact-us")
    }

    @IBAction func showFAQ(_ sender: UIButton) {
        openURL(withURLString: "http://www.time.com.my/support/faq?section=self-care")
    }

    @IBAction func toggleTooltip(_ sender: UIButton) {
        if sender == self.tooltip?.presentingView {
            self.tooltip?.dismiss(gesture: nil)
            self.tooltip = nil
            return
        }
        
   //     let message: String = sender == usernameIconButton ? NSLocalizedString("Your username is your MyKad No./ Passport No./ Business Registration No. [BRN] \n e.g. MyKad No. : 810530105163 \n Passport No.:(as stated on your passport) \n BRN: 413292P", comment: "") : NSLocalizedString("If you can't remember, click on 'Forgot Password' to reset. Special characters are not allowed.", comment: "")
        
         let message: String = sender == usernameIconButton ? NSLocalizedString("Your username should not contain any special characters such as \"-\".", comment: "") : NSLocalizedString("If you can't remember, click on 'Forgot Password' to reset. Special characters are not allowed.", comment: "")
        
        let attributes: [NSAttributedString.Key: Any] = [NSAttributedString.Key.font: UIFont.getCustomFont(family: "DIN", style: .caption1) ?? UIFont.preferredFont(forTextStyle: .caption1), NSAttributedString.Key.foregroundColor: UIColor.white]
        let attributedString = NSAttributedString(string: message, attributes: attributes)

        var preferences = EasyTipView.Preferences()
        preferences.drawing.font = UIFont.getCustomFont(family: "DIN", style: .caption1) ?? UIFont.preferredFont(forTextStyle: .caption1)
        preferences.drawing.foregroundColor = UIColor.white
        preferences.drawing.backgroundColor = UIColor.black
        preferences.positioning.maxWidth = containerView.bounds.width
        preferences.drawing.arrowPosition = EasyTipView.ArrowPosition.top
        let tooltip = EasyTipView(text: attributedString, preferences: preferences, delegate: nil)
        self.tooltip?.dismiss(gesture: nil)
        self.tooltip = tooltip
        self.tooltip?.show(animated: true, forView: sender, withinSuperview: self.containerView)
    }

    @IBAction func triggerModeChange(_ sender: Any) {
        self.triggerModeChangeCount += 1

        if self.triggerModeChangeCount >= 5 {
            self.triggerModeChangeCount = 0

//            let isStagingMode: Bool = UserDefaults.standard.bool(forKey: Installation.kIsStagingMode)
//            UserDefaults.standard.set(!isStagingMode, forKey: Installation.kIsStagingMode)
            let mode: String = UserDefaults.standard.string(forKey: Installation.kMode) ?? "Production"
            if mode == "Production" {
                UserDefaults.standard.set("Staging", forKey: Installation.kMode)
            } else if mode == "Staging" {
                UserDefaults.standard.set("BB Staging 2", forKey: Installation.kMode)
            } else if mode == "BB Staging 2" {
                UserDefaults.standard.set("BB Staging 3", forKey: Installation.kMode)
            } else if mode == "BB Staging 3" {
                UserDefaults.standard.set("Production", forKey: Installation.kMode)
            }

            self.updateVersionDisplay()
        }
    }

    private func updateVersionDisplay() {
//         let isStagingMode: Bool = UserDefaults.standard.bool(forKey: Installation.kIsStagingMode)
        let mode: String = UserDefaults.standard.string(forKey: Installation.kMode) ?? "Production"

        var appVersion = Installation.appVersion
//        if isStagingMode {
//            appVersion = "\(appVersion) (Staging)"
//        }
        if mode == "Staging" {
            appVersion = "\(appVersion) (Staging)"
        } else if mode == "BB Staging 2" {
             appVersion = "\(appVersion) (BB Staging 2)"
        }  else if mode == "BB Staging 3" {
            appVersion = "\(appVersion) (BB Staging 3)"
        } else if mode == "Production" {
             appVersion = "\(appVersion)"
        }

        self.versionButton.setTitle(appVersion, for: .normal)
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        
        for subview in self.containerView.subviews where subview is EasyTipView {
            subview.removeFromSuperview()
        }
        
        if textField == self.usernameTextField {
            self.toggleTooltip(usernameIconButton)
        }
         
        if textField == self.passwordTextField {
            self.toggleTooltip(passwordIconButton)
        }
    }

    func textFieldDidEndEditing(_ textField: UITextField) {
        self.tooltip?.dismiss(gesture: nil) {
            self.tooltip = nil
        }
    }

    override func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {

        if string == "" {
            textField.deleteBackward()
        } else {
            textField.insertText(textField == usernameTextField ? string : string.withoutWhitespace())
        }
        self.updateUI()
        return false
    }
}

extension LoginViewController: KeyboardChangeObserver {
    func keyboardChanging(endHeight: CGFloat, duration: TimeInterval) {
        self.scrollView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: endHeight, right: 0)
    }
}
